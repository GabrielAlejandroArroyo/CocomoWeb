// <auto-generated />
using System;
using CocomoBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CocomoBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CocomoBackend.Models.CocomoDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCocomoVersion")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("CocomoDetails");
                });

            modelBuilder.Entity("CocomoBackend.Models.CocomoFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdCocomoVersion")
                        .HasColumnType("int");

                    b.Property<int>("TypeFactorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeFactorId");

                    b.ToTable("CocomoFactors");
                });

            modelBuilder.Entity("CocomoBackend.Models.CocomoHead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ActiveCaim")
                        .HasColumnType("bit");

                    b.Property<bool>("ActiveEstimation")
                        .HasColumnType("bit");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EstimationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EstimationObservations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCocomostate")
                        .HasColumnType("int");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.Property<int>("IdModule")
                        .HasColumnType("int");

                    b.Property<int>("IdOwner")
                        .HasColumnType("int");

                    b.Property<int>("IdRevisor")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeComplexity")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeRequirement")
                        .HasColumnType("int");

                    b.Property<int>("IdVertical")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IdCocomostate");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdModule");

                    b.HasIndex("IdTypeComplexity");

                    b.HasIndex("IdTypeRequirement");

                    b.HasIndex("IdVertical");

                    b.ToTable("CocomoHeads");
                });

            modelBuilder.Entity("CocomoBackend.Models.CocomoState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CocomoStates");
                });

            modelBuilder.Entity("CocomoBackend.Models.CocomoStateVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CocomoStatesVersions");
                });

            modelBuilder.Entity("CocomoBackend.Models.CocomoTypeProyect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AD")
                        .HasColumnType("int");

                    b.Property<int>("CP")
                        .HasColumnType("int");

                    b.Property<int>("DB")
                        .HasColumnType("int");

                    b.Property<int>("DD")
                        .HasColumnType("int");

                    b.Property<int>("DF")
                        .HasColumnType("int");

                    b.Property<int>("DT")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCocomoVersion")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeProyect")
                        .HasColumnType("int");

                    b.Property<int>("PP")
                        .HasColumnType("int");

                    b.Property<string>("ProyectType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SDT")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CocomoRequeriments");
                });

            modelBuilder.Entity("CocomoBackend.Models.CocomoVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CocomostateversionId")
                        .HasColumnType("int");

                    b.Property<int>("IdCocomoFactor")
                        .HasColumnType("int");

                    b.Property<int>("IdCocomoHead")
                        .HasColumnType("int");

                    b.Property<int>("IdCocomoRequeriment")
                        .HasColumnType("int");

                    b.Property<int>("IdCocomostateversion")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CocomostateversionId");

                    b.HasIndex("IdCocomoHead");

                    b.ToTable("CocomoVersions");
                });

            modelBuilder.Entity("CocomoBackend.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CocomoBackend.Models.Formula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Formulas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Formulas");
                });

            modelBuilder.Entity("CocomoBackend.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("CocomoBackend.Models.PlatformObjectTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangeDecription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChangeInitial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComplexityChangeDecription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComplexityChangeInitial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComplexityObjectDecription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComplexityObjectInitial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectDecription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectInitial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlatformDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlatformInitial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Time")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("PlatformObjectTimes");
                });

            modelBuilder.Entity("CocomoBackend.Models.TypeComplexity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdTypeRequirement")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeComplexities");
                });

            modelBuilder.Entity("CocomoBackend.Models.TypeFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeFactors");
                });

            modelBuilder.Entity("CocomoBackend.Models.TypeFactorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Data")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Formula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdTypeFactor")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeFactorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeFactorId");

                    b.ToTable("TypeFactorDetails");
                });

            modelBuilder.Entity("CocomoBackend.Models.TypeProyect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AD")
                        .HasColumnType("int");

                    b.Property<int>("CP")
                        .HasColumnType("int");

                    b.Property<int>("DB")
                        .HasColumnType("int");

                    b.Property<int>("DD")
                        .HasColumnType("int");

                    b.Property<int>("DF")
                        .HasColumnType("int");

                    b.Property<int>("DT")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Editable")
                        .HasColumnType("bit");

                    b.Property<int>("PP")
                        .HasColumnType("int");

                    b.Property<string>("ProyectType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SDT")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TypeProyects");
                });

            modelBuilder.Entity("CocomoBackend.Models.TypeRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeRequirements");
                });

            modelBuilder.Entity("CocomoBackend.Models.Vertical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Verticals");
                });

            modelBuilder.Entity("CocomoBackend.Models.CocomoDetail", b =>
                {
                    b.HasOne("CocomoBackend.Models.PlatformObjectTime", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CocomoBackend.Models.CocomoFactor", b =>
                {
                    b.HasOne("CocomoBackend.Models.TypeFactor", "TypeFactor")
                        .WithMany()
                        .HasForeignKey("TypeFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeFactor");
                });

            modelBuilder.Entity("CocomoBackend.Models.CocomoHead", b =>
                {
                    b.HasOne("CocomoBackend.Models.CocomoState", "Cocomostate")
                        .WithMany("CocomoHeads")
                        .HasForeignKey("IdCocomostate")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CocomoBackend.Models.Customer", "Customer")
                        .WithMany("CocomoHeads")
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CocomoBackend.Models.Module", "Module")
                        .WithMany("CocomoHeads")
                        .HasForeignKey("IdModule")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CocomoBackend.Models.TypeComplexity", "TypeComplexity")
                        .WithMany("CocomoHeads")
                        .HasForeignKey("IdTypeComplexity")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CocomoBackend.Models.TypeRequirement", "TypeRequirement")
                        .WithMany("CocomoHeads")
                        .HasForeignKey("IdTypeRequirement")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CocomoBackend.Models.Vertical", "Vertical")
                        .WithMany("CocomoHeads")
                        .HasForeignKey("IdVertical")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cocomostate");

                    b.Navigation("Customer");

                    b.Navigation("Module");

                    b.Navigation("TypeComplexity");

                    b.Navigation("TypeRequirement");

                    b.Navigation("Vertical");
                });

            modelBuilder.Entity("CocomoBackend.Models.CocomoVersion", b =>
                {
                    b.HasOne("CocomoBackend.Models.CocomoStateVersion", "Cocomostateversion")
                        .WithMany("CocomoVersions")
                        .HasForeignKey("CocomostateversionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocomoBackend.Models.CocomoHead", "CocomoHead")
                        .WithMany("CocomoVersions")
                        .HasForeignKey("IdCocomoHead")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CocomoHead");

                    b.Navigation("Cocomostateversion");
                });

            modelBuilder.Entity("CocomoBackend.Models.TypeFactorDetail", b =>
                {
                    b.HasOne("CocomoBackend.Models.TypeFactor", null)
                        .WithMany("FactorDetails")
                        .HasForeignKey("TypeFactorId");
                });

            modelBuilder.Entity("CocomoBackend.Models.CocomoHead", b =>
                {
                    b.Navigation("CocomoVersions");
                });

            modelBuilder.Entity("CocomoBackend.Models.CocomoState", b =>
                {
                    b.Navigation("CocomoHeads");
                });

            modelBuilder.Entity("CocomoBackend.Models.CocomoStateVersion", b =>
                {
                    b.Navigation("CocomoVersions");
                });

            modelBuilder.Entity("CocomoBackend.Models.Customer", b =>
                {
                    b.Navigation("CocomoHeads");
                });

            modelBuilder.Entity("CocomoBackend.Models.Module", b =>
                {
                    b.Navigation("CocomoHeads");
                });

            modelBuilder.Entity("CocomoBackend.Models.TypeComplexity", b =>
                {
                    b.Navigation("CocomoHeads");
                });

            modelBuilder.Entity("CocomoBackend.Models.TypeFactor", b =>
                {
                    b.Navigation("FactorDetails");
                });

            modelBuilder.Entity("CocomoBackend.Models.TypeRequirement", b =>
                {
                    b.Navigation("CocomoHeads");
                });

            modelBuilder.Entity("CocomoBackend.Models.Vertical", b =>
                {
                    b.Navigation("CocomoHeads");
                });
#pragma warning restore 612, 618
        }
    }
}
